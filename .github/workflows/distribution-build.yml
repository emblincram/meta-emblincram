name: Build Yocto Image

on:
  #push:
  #  branches:
  #    - main
  #pull_request:
  #  branches:
  #    - main
  workflow_dispatch:
    inputs:
      trigger:
        description: "start manually"
        required: true
        default: "yes"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull Yocto DevContainer Image
        run: docker pull ghcr.io/emblincram/devcon:latest

      - name: Set environment variables
        run: |
          echo "YOCTO_SSTATE_DIR=${{ runner.workspace }}/sstate-cache" >> $GITHUB_ENV
          echo "YOCTO_DL_DIR=${{ runner.workspace }}/downloads" >> $GITHUB_ENV

      - name: Cache SState & Downloads
        uses: actions/cache@v3
        with:
          path: |
            $YOCTO_SSTATE_DIR
            $YOCTO_DL_DIR
          key: yocto-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            yocto-cache-${{ runner.os }}-

      - name: Run Install Script
        run: |          
          cd ${{ github.workspace }}
          if [ ! -f install.sh ]; then
            echo "Error: install.sh not found!"
            exit 1
          fi
          chmod +x install.sh
          ./install.sh
          cd ..

          echo "-------"
          ls
          echo "-------"
          ls meta-emblincram

      - name: Run initialize-command.sh
        run: |
          cd ${{ runner.workspace }}
          ls 
          ls meta-emblincram/toolbox
          if [ ! -f meta-emblincram/toolbox/initialize-command.sh ]; then
            echo "Error: initialize-command.sh not found!"
            exit 1
          fi
          chmod +x meta-emblincram/toolbox/initialize-command.sh
          ./meta-emblincram/toolbox/initialize-command.sh .
          ls

      - name: Run Yocto Build
        run: |
          cd ${{ runner.workspace }}
          pwd
          ls
          echo '-----'
          docker run --rm \
            -v ${{ runner.workspace }}/application:/home/yocto/app \
            -v ${{ runner.workspace }}/build:/home/yocto/build \
            -v ${{ runner.workspace }}/meta-arm:/home/yocto/meta-arm \
            -v ${{ runner.workspace }}/meta-ti:/home/yocto/meta-ti \
            -v ${{ runner.workspace }}/meta-openembedded:/home/yocto/meta-openembedded \
            -v ${{ runner.workspace }}/meta-emblincram:/home/yocto/meta-emblincram \
            -v ${{ runner.workspace }}/poky:/home/yocto/poky \
            -v ${{ runner.workspace }}/sstate-cache:/home/yocto/sstate-cache \
            -v ${{ runner.workspace }}/downloads:/home/yocto/downloads \
            -w /home/yocto \
            --user yocto \
            ghcr.io/emblincram/devcon:latest /bin/bash -i -c "
              sudo chown -R yocto:yocto /home/yocto
              pwd
              echo '### blub ###'
              ls
              echo '### blub ###'
              ls meta-emblincram
              echo '### blub ###'
              chmod +x meta-emblincram/toolbox/post-create-command.sh
              ./meta-emblincram/toolbox/post-create-command.sh /home/yocto
              echo '### blub ###'
              ls
              echo '### blub ###'
              ls build
              echo '### blub ###'              
              source activate-env.sh
              bitbake core-image-full-cmdline 2>&1 | tee build-log.txt
            "
          

